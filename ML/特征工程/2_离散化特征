##数值分箱
##有监督分箱
#降基处理
# 先用卡方分箱输出变量的分割点
def split_data(col,df=train,split_num=90):
    """
    df: 原始数据集
    col:需要分箱的变量
    split_num:分割点的数量
    """
    df2 = df.copy() 
    count = df2.shape[0] # 总样本数
    n = math.floor(count/split_num) # 按照分割点数目等分后每组的样本数
    split_index = [i*n for i in range(1,split_num)] # 分割点的索引
    values = sorted(list(df2[col])) # 对变量的值从小到大进行排序
    split_value = [values[i] for i in split_index] # 分割点对应的value
    split_value = sorted(list(set(split_value))) # 分割点的value去重排序
    return split_value 
def assign_group(x,col,split_bin):
    """
    x:变量的value
    split_bin:split_data得出的分割点list,split_value
    """
    n = len(split_bin)
    if x<=min(split_bin):   
        return min(split_bin) # 如果x小于分割点的最小值，则x映射为分割点的最小值
    elif x>max(split_bin): # 如果x大于分割点的最大值，则x映射为分割点的最大值
        return max(split_bin)
    else:
        for i in range(n-1):
            if split_bin[i]<x<=split_bin[i+1]:# 如果x在两个分割点之间，则x映射为分割点较大的值
                return split_bin[i+1]
#有监督分箱
def combine_box_char(dic):  
    ''' 
    实施两种分箱策略。 
    1.不同箱之间负样本占比差异最大化。 
    2.每一箱的样本量不能过少。 
    '''  
    #首先合并至10箱以内。按照每一箱负样本占比差异最大化原则进行分箱。  
    while len(dic) >= 10:  
        #k是特征值，v["bad_rate"]是特征值对应的负样本占比
        bad_rate_dic = {k: v["bad_rate"] 
                                         for (k, v) in dic.items()}  
        #按照负样本占比排序。因为离散型变量 是无序的，
                    #可以直接写成负样本占比递增的形式。  
        bad_rate_sorted = sorted(bad_rate_dic.items(),
                                                     key=lambda x: x[1])
        #计算每两箱之间的负样本占比差值。
                    #准备将差值最小的两箱进行合并。  
        bad_rate = [bad_rate_sorted[i+1][1]-
                                  bad_rate_sorted[i][1] for i in 
                                  range(len(bad_rate_sorted)-1)]
        min_rate_index = bad_rate.index(min(bad_rate))  
        #k1和k2是差值最小的两箱的key.  
        k1, k2 = bad_rate_sorted[min_rate_index][0],\
                                 bad_rate_sorted[min_rate_index+1][0]  
        #得到重新划分后的字典，箱的个数比之前少一。  
        dic["%s,%s" % (k1, k2)] = dict()  
        dic["%s,%s" % (k1, k2)]["0"] = dic[k1].get("0", 0)\
                                                        + dic[k2].get("0", 0)
        dic["%s,%s" % (k1, k2)]["1"] = dic[k1].get("1", 0) \
                                                        + dic[k2].get("1", 0)
        dic["%s,%s" % (k1, k2)]["cnt"] = dic[k1]["cnt"]\
                                                          + dic[k2]["cnt"]
        dic["%s,%s" % (k1, k2)]["bad_rate"] = round(
                                dic["%s,%s" % (k1, k2)]["1"] / 
                                dic["%s,%s" % (k1, k2)]["cnt"],5)  
        #删除旧的key。  
        del dic[k1], dic[k2]  
    ''' 
    结束循环后，箱的个数应该少于10。 
    下面实施第二种分箱策略。 
    将样本数量少的箱合并至其他箱中，以保证每一箱的样本数量不要太少。 
    '''  
    #记录当前样本最少的箱的个数。      
    min_cnt = min([v["cnt"] for v in dic.values()])  
    #当样本数量小于总样本的5%或者总箱的个数大于5的时候，对箱进行合并  
    while min_cnt < train.shape[0] * 0.05 and len(dic) > 5:  
        min_key = [k for (k, v) in dic.items() 
                                 if v["cnt"] == min_cnt][0]  
        bad_rate_dic = {k: v["bad_rate"] 
                                      for (k, v) in dic.items()}  
        bad_rate_sorted = sorted(bad_rate_dic.items(),
                                          key=lambda x: x[1])  
        keys = [k[0] for k in bad_rate_sorted]  
        min_index = keys.index(min_key)  
        ''''' 
        同样想保持合并后箱之间的负样本占比差异最大化。 
        由于箱的位置不同，按照三种不同情况进行分类讨论。 
        '''  
        #如果是第一箱，和第二项合并  
        if min_index == 0:  
            k1, k2 = keys[:2]  
        #如果是最后一箱，和倒数第二箱合并  
        elif min_index == len(dic) - 1:  
            k1, k2 = keys[-2:]  
        #如果是中间箱，和bad_rate值相差最小的箱合并  
        else:  
            bef_bad_rate = dic[min_key]["bad_rate"]\
                                         -dic[keys[min_index - 1]]["bad_rate"]
            aft_bad_rate = dic[keys[min_index+1]]["bad_rate"] - dic[min_key]["bad_rate"]
            if bef_bad_rate < aft_bad_rate:  
                k1, k2 = keys[min_index - 1], min_key
            else:  
                k1, k2 = min_key, keys[min_index + 1]
        #得到重新划分后的字典，箱的个数比之前少一。  
        dic["%s,%s" % (k1, k2)] = dict()  
        dic["%s,%s" % (k1, k2)]["0"] = dic[k1].get("0", 0) \
                                                         + dic[k2].get("0", 0)
        dic["%s,%s" % (k1, k2)]["1"] = dic[k1].get("1", 0)\
                                                         + dic[k2].get("1", 0)
        dic["%s,%s" % (k1, k2)]["cnt"] = dic[k1]["cnt"]\
                                                              +dic[k2]["cnt"]
        dic["%s,%s" % (k1, k2)]["bad_rate"] = round(
                                            dic["%s,%s" % (k1, k2)]["1"] / 
                                            dic["%s,%s" % (k1, k2)]["cnt"],5)
        #删除旧的key。  
        del dic[k1], dic[k2]  
        #当前最小的箱的样本个数  
        min_cnt = min([v["cnt"] for v in dic.values()])
    return dic
    
#分箱
dic = dict(train.groupby([y]).size()) 
good  = dic.get(0, 0) + 1e-10
bad =  dic.get(1, 0) + 1e-10 
for col in cols2:
    try:
        data_num = dict(train[[col,y]].groupby([col, y]).size())

        if len(dic) > 110:  
                print(col, "contains too many different values...")
                continue  
            #打印取值个数  
    #     print(col, len(data))  

        dic = dict()  
        #k是特征名和特征取值的组合，v是样本数  
        for (k, v) in data_num.items():  
            #value为特征名，dp为特征取值  
            value, dp = k  
            #如果找不到key设置为一个空字典  
            dic.setdefault(value, {})   
            #字典中嵌套字典  
            dic[value][int(dp)] = v  

        for (k, v) in dic.items():  
            dic[k] = {str(int(k1)): v1 for (k1, v1) in v.items()}  
            dic[k]["cnt"] = sum(v.values())  
            bad_rate = round(v.get("1", 0)/ dic[k]["cnt"], 5)  
            dic[k]["bad_rate"] = bad_rate

    #     #利用定义的函数进行合并。  
        dic = combine_box_char(dic)  

        #对每个特征计算WOE值和IV值  
        for (k, v) in dic.items():  
            a = v.get("0", 1) / good + 1e-10  
            b = v.get("1", 1) / bad + 1e-10  
            dic[k]["Good"] = v.get("0", 0)  
            dic[k]["Bad"] = v.get("1", 0)  
            dic[k]["woe"] = round(math.log(a / b), 5)  
        ''' 
        按照分箱后的点进行分割， 
        计算得到每一个特征值的WOE值， 
        将原始特征名加上'_woe'后缀，并赋予WOE值。 
        '''  
    #     print(dic)
        for (klis, v) in dic.items():  

              for k in klis.split(","):  
                #训练集进行替换  
                    train.loc[train[col]==int(float(k)),
                                                "%s_woe" % col] = v["woe"]
                    #测试集进行替换  
                    if not isinstance(X_test, str):  
                        test.loc[test[col]==int(float(k)),
                                                     "%s_woe" % col] = v["woe"]
    #             #跨时间验证集进行替换  
    #                 if not isinstance(off_x, str):  
    #                     off_x.loc[off_x[col]==int(float(k)),                    
    #                                                  "%s_woe" % col] = v["woe"]
    except:
        print(col,'go on')
